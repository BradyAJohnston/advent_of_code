[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Advent of Code",
    "section": "",
    "text": "Just a quick website to post my advent of code workins for 2022."
  },
  {
    "objectID": "2022-python.html",
    "href": "2022-python.html",
    "title": "2022-python",
    "section": "",
    "text": "Now in Python!\nRead in the data in python.\n\nfile = \"data/day1.txt\"\nf = open(file)\nlines = f.read()\nf.close()\n\nlines = lines.split('\\n')\nlines[:10]\n\n['5474', '4920', '5381', '8650', '11617', '7193', '8161', '', '10747', '5855']\n\n\n\nclass Mischief:\n  def __init__(self):\n    self.elves = []\n    self.count = 0\n  \n  def add_elf(self):\n    self.elves.append(self.count)\n    yield self.count\n    \n    self.count += 1\n\nmain = Mischief()\n\nclass Elf:\n  def __init__(self, id = int(1)):\n    self.snacks = []\n    self.id = int(id)\n    \n    \n  def add_snack(self, calories):\n    self.snacks.append(calories)\n    \n  def cal_total(self):\n    if len(self.snacks) == 0:\n      return 0\n    \n    cals = 0\n    for snack in self.snacks:\n      cals += int(snack)\n    return cals\n\nnew_elf = True  \ncounter = 0\nelves = []\nfor snack in lines:\n  if new_elf:\n    elf = Elf(counter)\n    elves.append(elf)\n    new_elf = False\n  \n  if snack != \"\":\n    elves[counter].add_snack(int(snack))\n  else:\n    new_elf = True\n    counter += 1\n\n\nmax_elf = elves[0]\nfor elf in elves:\n  if elf.cal_total() > max_elf.cal_total():\n    max_elf = elf\nprint(\"Elf No. \" + str(max_elf.id) + \" with \" + str(max_elf.cal_total()) + \" calories.\")\n\nElf No. 30 with 66306 calories."
  },
  {
    "objectID": "2022.html",
    "href": "2022.html",
    "title": "Advent of Code",
    "section": "",
    "text": "Document for workingo out solutions to the advent of code."
  },
  {
    "objectID": "2022.html#day-1",
    "href": "2022.html#day-1",
    "title": "Advent of Code",
    "section": "Day 1",
    "text": "Day 1\n\nPart 1\nRead in the data:\n\n\n\nCode\n\noptions(tidyverse.quiet = TRUE)\nlibrary(tidyverse)\n\ndat <- read_lines('data/day1.txt') |> \n  as_tibble() |> \n  rename(calories = 1)\n\nhead(dat)\n\n\n# A tibble: 6 × 1\n  calories\n  <chr>   \n1 5474    \n2 4920    \n3 5381    \n4 8650    \n5 11617   \n6 7193    \n\n\nEach data point is separated by an empty line, we can check when those lines are empty and count upwards, to label each datapoints for each elf.\n\n\n\nCode\n\ndat <- dat |> \n  mutate(\n    calories = as.numeric(calories), \n    elf = cumsum(is.na(calories)) + 1\n  )\ndat\n\n\n# A tibble: 2,244 × 2\n   calories   elf\n      <dbl> <dbl>\n 1     5474     1\n 2     4920     1\n 3     5381     1\n 4     8650     1\n 5    11617     1\n 6     7193     1\n 7     8161     1\n 8       NA     2\n 9    10747     2\n10     5855     2\n# … with 2,234 more rows\n\n\nNow we can remove the empty rows, and nest the data for each elf.\n\n\n\nCode\n\ndat <- dat |> \ndrop_na(calories) |> \n  group_by(elf) |> \n  nest() \ndat\n\n\n# A tibble: 242 × 2\n# Groups:   elf [242]\n     elf data             \n   <dbl> <list>           \n 1     1 <tibble [7 × 1]> \n 2     2 <tibble [6 × 1]> \n 3     3 <tibble [13 × 1]>\n 4     4 <tibble [10 × 1]>\n 5     5 <tibble [14 × 1]>\n 6     6 <tibble [1 × 1]> \n 7     7 <tibble [2 × 1]> \n 8     8 <tibble [5 × 1]> \n 9     9 <tibble [7 × 1]> \n10    10 <tibble [8 × 1]> \n# … with 232 more rows\n\n\nFor each nested dataframe, we can sum together the calories and arrange the dataframe based on the descending total of calories\n\n\n\nCode\n\ndat <- dat |> \n  mutate(\n    total = map_dbl(data, sum)\n  ) |> \n  arrange(-total)\n\ndat\n\n\n# A tibble: 242 × 3\n# Groups:   elf [242]\n     elf data              total\n   <dbl> <list>            <dbl>\n 1    31 <tibble [12 × 1]> 66306\n 2   160 <tibble [14 × 1]> 64532\n 3   161 <tibble [1 × 1]>  64454\n 4    53 <tibble [14 × 1]> 64230\n 5     9 <tibble [7 × 1]>  63623\n 6   133 <tibble [14 × 1]> 63339\n 7   202 <tibble [11 × 1]> 62944\n 8   177 <tibble [6 × 1]>  62852\n 9   109 <tibble [3 × 1]>  62425\n10   181 <tibble [3 × 1]>  62355\n# … with 232 more rows\n\n\n\n\nPart 2\nWe need to first ungroup the rows, then rank the totals and get only the top 3 values.\n\n\n\nCode\n\ndat |> \n  ungroup() |> \n  filter(\n    rev(rank(total)) %in% 1:3\n  ) |> \n  summarise(total = sum(total))\n\n\n# A tibble: 1 × 1\n   total\n   <dbl>\n1 195292\n\n\n\n\nAdditional Poking Around\nSome additional visulisations of the daily data.\n\ndat |> \n  ggplot(aes(total)) + \n  geom_histogram(\n    fill = \"gray50\", \n    binwidth = 2000\n  ) + \n  labs(\n    x = \"Calories Carried\", \n    y = \"Number of Elves\"\n  ) + \n  theme_bw()"
  }
]